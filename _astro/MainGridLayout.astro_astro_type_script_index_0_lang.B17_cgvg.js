import{c as l}from"./config.Ctko1PgE.js";class d{constructor(){this.initialized=!1,this.config=null,this.retryCount=0,this.maxRetries=10}async init(){this.initialized||(this.config={envId:l.twikoo.envId},console.log("Initializing TwikooVisitorManager with config:",this.config),await this.waitForTwikoo(),this.updateAllVisitors(),this.initialized=!0,console.log("TwikooVisitorManager initialized successfully"))}waitForTwikoo(){return new Promise((t,i)=>{const o=()=>{typeof window<"u"&&window.twikoo?(console.log("Twikoo is available"),t()):this.retryCount<this.maxRetries?(this.retryCount++,console.log(`Waiting for Twikoo... attempt ${this.retryCount}/${this.maxRetries}`),setTimeout(o,500)):(console.error("Twikoo failed to load after maximum retries"),i(new Error("Twikoo failed to load")))};o()})}async updateAllVisitors(){const t=document.querySelectorAll('[id^="twikoo_visitors"]');if(t.length===0){console.log("No visitor elements found");return}console.log(`Found ${t.length} visitor elements`);const i=[],o=new Map;for(const e of t){const n=this.extractUrlFromId(e.id);i.push(n),o.set(n,e)}try{const e=await this.getVisitorCounts(i);for(const[n,r]of Object.entries(e)){const s=o.get(n);s&&(s.textContent=r.toString(),console.log(`Updated ${n}: ${r} visitors`))}}catch(e){console.error("Failed to get visitor counts:",e);for(const n of t)try{const r=this.extractUrlFromId(n.id),s=await this.getSingleVisitorCount(r);n.textContent=s.toString(),console.log(`Updated ${r}: ${s} visitors (single)`)}catch(r){console.error(`Failed to update visitor count for ${n.id}:`,r),n.textContent="0"}}}extractUrlFromId(t){if(t==="twikoo_visitors")return window.location.pathname;if(t.startsWith("twikoo_visitors_")){let i=t.replace("twikoo_visitors_","").replace(/_/g,"/");return i.startsWith("/")||(i="/"+i),i}return window.location.pathname}async getVisitorCounts(t){if(!window.twikoo)throw new Error("Twikoo not available");try{const i=await fetch(this.config.envId,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({event:"COUNTER_GET",urls:t})});if(i.ok){const o=await i.json();console.log("Batch visitor counts response:",o);const e={};return Array.isArray(o)?o.forEach((n,r)=>{e[t[r]]=n.time||0}):o.data&&Array.isArray(o.data)&&o.data.forEach((n,r)=>{e[t[r]]=n.time||0}),e}}catch(i){console.error("Batch API failed:",i)}throw new Error("Batch API not available")}async getSingleVisitorCount(t){if(!window.twikoo)throw new Error("Twikoo not available");try{const i=await fetch(this.config.envId,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({event:"COUNTER_GET",url:t})});if(i.ok){const o=await i.json();if(console.log(`Single visitor count for ${t}:`,o),o.time!==void 0)return o.time;if(o.data&&o.data.time!==void 0)return o.data.time}return 0}catch(i){return console.error(`Error getting visitor count for ${t}:`,i),0}}async updateVisitorForUrl(t){const i=`twikoo_visitors_${t.replace(/[^a-zA-Z0-9]/g,"_")}`,o=document.getElementById(i);if(o)try{const e=await this.getSingleVisitorCount(t);o.textContent=e.toString()}catch(e){console.error(`Failed to update visitor count for ${t}:`,e)}}}window.twikooVisitorManager=new d;function a(){window.twikooVisitorManager&&window.twikooVisitorManager.init().catch(c=>{console.error("Failed to initialize Twikoo visitors:",c)})}document.addEventListener("DOMContentLoaded",()=>{setTimeout(a,3e3)});document.addEventListener("astro:page-load",()=>{setTimeout(a,2e3)});window.addEventListener("popstate",()=>{setTimeout(a,2e3)});

---
import I18nKey from "../../i18n/i18nKey";
import { i18n } from "../../i18n/translation";
import WidgetLayout from "./WidgetLayout.astro";
import { Icon } from "astro-icon/components";

interface Props {
	class?: string;
	style?: string;
}
const className = Astro.props.class;
const style = Astro.props.style;
---

<WidgetLayout name="一言" id="hitokoto" class={className} style={style}>
    <div class="hitokoto-container">
        <div class="hitokoto-content">
            <div class="hitokoto-text text-neutral-700 dark:text-neutral-300 text-sm leading-relaxed mb-3" id="hitokoto-text">
                <div class="flex items-center justify-center py-4">
                    <Icon name="material-symbols:refresh" class="animate-spin text-[var(--primary)] text-lg" />
                    <span class="ml-2 text-neutral-500 dark:text-neutral-400">加载中...</span>
                </div>
            </div>

        </div>
    </div>
</WidgetLayout>

<script>
    function initHitokoto() {
        const textElement = document.getElementById('hitokoto-text');
        let isLoading = false;

        function setLoading(loading) {
            isLoading = loading;
            if (loading && textElement) {
                textElement.innerHTML = `
                    <div class="flex items-center justify-center py-4">
                        <svg class="animate-spin w-4 h-4 mr-2 text-[var(--primary)]" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 714 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span class="text-neutral-500 dark:text-neutral-400">加载中...</span>
                    </div>
                `;
            }
        }

        function displayHitokoto(text) {
            if (textElement) {
                textElement.innerHTML = `<p class="italic leading-relaxed">${text}</p>`;
            }
        }

        function displayError(message) {
            if (textElement) {
                textElement.innerHTML = `
                    <div class="flex items-center justify-center py-4 text-red-500 dark:text-red-400">
                        <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                        </svg>
                        ${message}
                    </div>
                `;
            }
        }

        async function fetchHitokoto() {
            if (isLoading) return;
            
            setLoading(true);

            try {
                const response = await fetch('https://v2.xxapi.cn/api/yiyan?type=hitokoto');
                const data = await response.json();
                
                if (data.code === 200 && data.data) {
                    displayHitokoto(data.data);
                } else {
                    displayError('获取一言失败');
                }
            } catch (error) {
                console.error('获取一言时出错:', error);
                displayError('网络连接失败');
            } finally {
                setLoading(false);
            }
        }

        // 初始加载
        fetchHitokoto();
    }

    // 页面加载时初始化
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initHitokoto);
    } else {
        initHitokoto();
    }

    // Swup 页面切换支持
    const setupSwupHooks = () => {
        if (window.swup && window.swup.hooks) {
            window.swup.hooks.on('page:view', initHitokoto);
        }
    };

    if (window.swup) {
        setupSwupHooks();
    } else {
        document.addEventListener('swup:enable', setupSwupHooks);
    }
</script>

<style>
    .hitokoto-container {
        @apply px-4 pb-2;
    }

    .hitokoto-text {
        min-height: 3rem;
        @apply transition-all duration-300;
    }

    .hitokoto-text p {
        @apply mb-0 leading-relaxed;
    }



    .animate-spin {
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }
</style>
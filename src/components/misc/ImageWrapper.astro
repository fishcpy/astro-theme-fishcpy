---
import path from "node:path";

interface Props {
	id?: string;
	src: string;
	class?: string;
	alt?: string;
	position?: string;
	basePath?: string;
}

import { Image } from "astro:assets";
import { url } from "../../utils/url-utils";

const { id, src, alt, position = "center", basePath = "/" } = Astro.props;
const className = Astro.props.class;

const isLocal = !(
	src.startsWith("/") ||
	src.startsWith("http") ||
	src.startsWith("https") ||
	src.startsWith("data:")
);
const isPublic = src.startsWith("/");

// TODO temporary workaround for images dynamic import
// https://github.com/withastro/astro/issues/3373
// biome-ignore lint/suspicious/noImplicitAnyLet: <check later>
let img;
if (isLocal) {
	const files = import.meta.glob<ImageMetadata>("../../**", {
		import: "default",
	});
	let normalizedPath = path
		.normalize(path.join("../../", basePath, src))
		.replace(/\\/g, "/");
	const file = files[normalizedPath];
	if (!file) {
		console.error(
			`\n[ERROR] Image file not found: ${normalizedPath.replace("../../", "src/")}`,
		);
	}
	img = await file();
}

const imageClass = "w-full h-full object-cover";
const imageStyle = `object-position: ${position}`;
---
<div id={id} class:list={[className, 'overflow-hidden relative image-wrapper']}>
    <div class="transition absolute inset-0 dark:bg-black/10 bg-opacity-50 pointer-events-none"></div>
    
    <!-- 加载占位符 -->
    <div class="image-placeholder absolute inset-0 flex items-center justify-center bg-neutral-100 dark:bg-neutral-800">
        <div class="animate-pulse w-8 h-8 bg-neutral-300 dark:bg-neutral-600 rounded-full"></div>
    </div>
    
    {isLocal && img && (
        <Image 
            src={img} 
            alt={alt || ""} 
            class={`${imageClass} image-content opacity-0 transition-opacity duration-300`}
            style={imageStyle}
            loading="lazy"
        />
    )}
    {!isLocal && (
        <img 
            src={isPublic ? url(src) : src} 
            alt={alt || ""} 
            class={`${imageClass} image-content opacity-0 transition-opacity duration-300`}
            style={imageStyle}
            loading="lazy"
        />
    )}
</div>

<script>
    function initImageWrapper() {
        const imageWrappers = document.querySelectorAll('.image-wrapper');
        
        imageWrappers.forEach(wrapper => {
            const img = wrapper.querySelector('.image-content');
            const placeholder = wrapper.querySelector('.image-placeholder');
            
            if (img && placeholder) {
                // 图片加载完成处理
                const handleImageLoad = () => {
                    img.classList.remove('opacity-0');
                    img.classList.add('opacity-100');
                    placeholder.style.display = 'none';
                };
                
                // 图片加载错误处理
                const handleImageError = () => {
                    placeholder.innerHTML = `
                        <div class="flex flex-col items-center justify-center text-neutral-400 dark:text-neutral-500">
                            <svg class="w-8 h-8 mb-2" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd" />
                            </svg>
                            <span class="text-xs">图片加载失败</span>
                        </div>
                    `;
                };
                
                // 检查图片是否已经加载
                if (img.complete && img.naturalHeight !== 0) {
                    handleImageLoad();
                } else {
                    img.addEventListener('load', handleImageLoad);
                    img.addEventListener('error', handleImageError);
                }
            }
        });
    }
    
    // 页面加载时初始化
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initImageWrapper);
    } else {
        initImageWrapper();
    }
    
    // Swup 页面切换支持
    const setupImageWrapperSwupHooks = () => {
        if (window.swup && window.swup.hooks) {
            window.swup.hooks.on('page:view', initImageWrapper);
        }
    };
    
    if (window.swup) {
        setupImageWrapperSwupHooks();
    } else {
        document.addEventListener('swup:enable', setupImageWrapperSwupHooks);
    }
</script>

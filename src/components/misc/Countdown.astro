---
interface Props {
  targetDate: string; // 目标日期，格式为 'YYYY-MM-DD'
  startDate: string; // 起始日期，格式为 'YYYY-MM-DD'
  title?: string; // 倒计时标题，可选
}

const { targetDate, startDate, title = "倒计时" } = Astro.props;

// 格式化日期为"年月日"格式
function formatDateToChinese(dateStr: string) {
  const [year, month, day] = dateStr.split('-');
  return `${year}年${month}月${day}日`;
}

const startDateChinese = formatDateToChinese(startDate);
const targetDateChinese = formatDateToChinese(targetDate);
---

<div class="countdown-container">
  <h3 class="countdown-title">{title}</h3>
  <p class="countdown-dates">{startDateChinese}到{targetDateChinese}</p>
  
  <div class="progress-container">
    <div class="progress-bar" data-start-date={startDate} data-target-date={targetDate}></div>
    <div class="progress-text">0%</div>
  </div>
  
  <div class="countdown" data-target-date={targetDate}>
    <div class="countdown-item">
      <span class="countdown-value" id="countdown-years">0</span>
      <span class="countdown-label">年</span>
    </div>
    <div class="countdown-item">
      <span class="countdown-value" id="countdown-months">0</span>
      <span class="countdown-label">月</span>
    </div>
    <div class="countdown-item">
      <span class="countdown-value" id="countdown-days">0</span>
      <span class="countdown-label">天</span>
    </div>
    <div class="countdown-item">
      <span class="countdown-value" id="countdown-hours">0</span>
      <span class="countdown-label">时</span>
    </div>
    <div class="countdown-item">
      <span class="countdown-value" id="countdown-minutes">0</span>
      <span class="countdown-label">分</span>
    </div>
    <div class="countdown-item">
      <span class="countdown-value" id="countdown-seconds">0</span>
      <span class="countdown-label">秒</span>
    </div>
  </div>
</div>

<style>
  .countdown-container {
    margin: 2rem 0;
    padding: 1.5rem;
    border-radius: 0.5rem;
    background-color: var(--theme-surface-1);
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
  }

  /* 增强深色模式下容器的可见性 */
  :global(.dark) .countdown-container {
    background-color: rgba(35, 35, 50, 0.9);
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.4), 0 0 0 2px rgba(255, 255, 255, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(5px);
  }

  .countdown-title {
    margin-top: 0;
    margin-bottom: 0.5rem;
    font-size: 1.5rem;
    color: var(--theme-text);
    text-shadow: 0 0 1px rgba(255, 255, 255, 0.1);
  }

  /* 确保在深色模式下标题可见 */
  :global(.dark) .countdown-title {
    color: white;
    text-shadow: 0 0 2px rgba(0, 0, 0, 0.8);
  }

  .countdown-dates {
    margin-bottom: 1.5rem;
    font-size: 1rem;
    color: var(--text-2);
    font-weight: 500;
    text-align: center;
    margin-top: 1rem;
    font-style: italic;
  }

  /* 确保在深色模式下日期文本可见 */
  :global(.dark) .countdown-dates {
    color: hsl(0, 0%, 90%);
    text-shadow: 0 0 4px rgba(255, 255, 255, 0.6);
    font-weight: 500;
    opacity: 1;
  }

  .progress-container {
    margin: 1.5rem 0;
    position: relative;
    height: 20px;
    background-color: rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    overflow: hidden;
  }

  /* 确保在深色模式下进度条背景可见 */
  :global(.dark) .progress-container {
    background-color: rgba(255, 255, 255, 0.25);
    box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.3), 0 0 2px rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.15);
  }

  .progress-bar {
    height: 100%;
    background-color: var(--theme-primary);
    border-radius: 10px;
    width: 0%;
    transition: width 0.5s ease;
  }

  /* 增强深色模式下进度条的可见性 */
  :global(.dark) .progress-bar {
    background-color: var(--theme-primary);
    box-shadow: 0 0 10px rgba(var(--color-primary-rgb), 0.8), 0 0 4px rgba(255, 255, 255, 0.4);
    filter: brightness(1.3);
  }

  .progress-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: var(--theme-text);
    font-weight: bold;
    font-size: 0.8rem;
    text-shadow: 0 0 3px rgba(0, 0, 0, 0.5);
  }

  /* 确保在深色模式下文本可见 */
  :global(.dark) .progress-text {
    color: white;
    text-shadow: 0 0 3px rgba(0, 0, 0, 0.8);
  }

  .countdown {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 1rem;
    margin-top: 1.5rem;
  }

  .countdown-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 60px;
  }

  .countdown-value {
    font-size: 1.8rem;
    font-weight: bold;
    color: var(--theme-primary);
  }

  /* 确保在深色模式下数值更明显 */
  :global(.dark) .countdown-value {
    color: hsl(0, 0%, 95%);
    text-shadow: 0 0 12px rgba(255, 255, 255, 0.8), 0 0 6px rgba(255, 255, 255, 0.5);
    font-weight: 800;
    filter: brightness(1.4);
    opacity: 1;
  }

  .countdown-label {
    font-size: 0.9rem;
    color: var(--theme-text-light);
    margin-top: 0.25rem;
  }

  /* 确保在深色模式下标签文本可见 */
  :global(.dark) .countdown-label {
    color: hsl(0, 0%, 90%);
    text-shadow: 0 0 5px rgba(255, 255, 255, 0.7), 0 0 2px rgba(0, 0, 0, 0.5);
    font-weight: 600;
    opacity: 0.95;
    letter-spacing: 0.05em;
  }

  @media (max-width: 768px) {
    .countdown {
      gap: 0.5rem;
    }
    
    .countdown-item {
      min-width: 50px;
    }
    
    .countdown-value {
      font-size: 1.5rem;
    }
    
    .countdown-label {
      font-size: 0.8rem;
    }
  }
</style>

<script>
  // 查找所有倒计时组件和进度条
  const countdownElements = document.querySelectorAll('.countdown');
  const progressBars = document.querySelectorAll('.progress-bar');
  
  // 更新进度条的函数
  function updateProgressBar(progressBar) {
    const startDateStr = progressBar.getAttribute('data-start-date');
    const targetDateStr = progressBar.getAttribute('data-target-date');
    
    if (!startDateStr || !targetDateStr) return;
    
    const startDate = new Date(startDateStr);
    const targetDate = new Date(targetDateStr);
    const now = new Date();
    
    // 计算总时间和已经过去的时间（毫秒）
    const totalTime = targetDate.getTime() - startDate.getTime();
    const elapsedTime = now.getTime() - startDate.getTime();
    
    // 计算进度百分比
    let progressPercent = (elapsedTime / totalTime) * 100;
    
    // 确保进度在0-100之间
    progressPercent = Math.max(0, Math.min(100, progressPercent));
    
    // 更新进度条宽度
    progressBar.style.width = `${progressPercent}%`;
    
    // 更新进度文本
    const progressText = progressBar.parentElement.querySelector('.progress-text');
    if (progressText) {
      progressText.textContent = `${Math.round(progressPercent)}%`;
    }
  }
  
  // 更新所有进度条
  progressBars.forEach(updateProgressBar);
  
  // 更新倒计时
  countdownElements.forEach(countdownElement => {
    const targetDateStr = countdownElement.getAttribute('data-target-date');
    if (!targetDateStr) return;
    
    const targetDate = new Date(targetDateStr);
    
    // 更新倒计时的函数
    function updateCountdown() {
      const now = new Date();
      
      // 如果目标日期已过，显示0
      if (now >= targetDate) {
        countdownElement.querySelector('#countdown-years').textContent = '0';
        countdownElement.querySelector('#countdown-months').textContent = '0';
        countdownElement.querySelector('#countdown-days').textContent = '0';
        countdownElement.querySelector('#countdown-hours').textContent = '0';
        countdownElement.querySelector('#countdown-minutes').textContent = '0';
        countdownElement.querySelector('#countdown-seconds').textContent = '0';
        return;
      }
      
      // 计算时间差
      let years = targetDate.getFullYear() - now.getFullYear();
      let months = targetDate.getMonth() - now.getMonth();
      let days = targetDate.getDate() - now.getDate();
      
      // 调整月份和天数
      if (days < 0) {
        months--;
        // 获取上个月的天数
        const lastDayOfLastMonth = new Date(now.getFullYear(), now.getMonth(), 0).getDate();
        days += lastDayOfLastMonth;
      }
      
      if (months < 0) {
        years--;
        months += 12;
      }
      
      // 计算小时、分钟和秒
      const diffMs = targetDate.getTime() - now.getTime();
      const diffHours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const diffMinutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
      const diffSeconds = Math.floor((diffMs % (1000 * 60)) / 1000);
      
      // 更新DOM
      countdownElement.querySelector('#countdown-years').textContent = years.toString();
      countdownElement.querySelector('#countdown-months').textContent = months.toString();
      countdownElement.querySelector('#countdown-days').textContent = days.toString();
      countdownElement.querySelector('#countdown-hours').textContent = diffHours.toString().padStart(2, '0');
      countdownElement.querySelector('#countdown-minutes').textContent = diffMinutes.toString().padStart(2, '0');
      countdownElement.querySelector('#countdown-seconds').textContent = diffSeconds.toString().padStart(2, '0');
      
      // 同时更新进度条
      progressBars.forEach(updateProgressBar);
    }
    
    // 初始更新
    updateCountdown();
    
    // 每秒更新一次
    setInterval(updateCountdown, 1000);
  });
</script>
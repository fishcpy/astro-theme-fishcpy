---
import { Icon } from "astro-icon/components";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import { formatDateToYYYYMMDD } from "../utils/date-utils";
import { getCategoryUrl, getTagUrl } from "../utils/url-utils";
import { commentConfig } from '@/config';

interface Props {
	class: string;
	published: Date;
	updated?: Date;
	tags: string[];
	category: string | null;
	hideTagsForMobile?: boolean;
	hideUpdateDate?: boolean;
	url?: string;
}
const {
	published,
	updated,
	tags,
	category,
	hideTagsForMobile = false,
	hideUpdateDate = false,
	url,
} = Astro.props;
const className = Astro.props.class;
const path = url || Astro.url.pathname;
const envId = commentConfig.twikoo?.envId;
---

<div class:list={["flex flex-wrap text-neutral-500 dark:text-neutral-400 items-center gap-4 gap-x-4 gap-y-2", className]}>
    <!-- publish date -->
    <div class="flex items-center">
        <div class="meta-icon"
        >
            <Icon name="material-symbols:calendar-today-outline-rounded" class="text-xl"></Icon>
        </div>
        <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(published)}</span>
    </div>

    <!-- update date -->
    {!hideUpdateDate && updated && updated.getTime() !== published.getTime() && (
        <div class="flex items-center">
            <div class="meta-icon"
            >
                <Icon name="material-symbols:edit-calendar-outline-rounded" class="text-xl"></Icon>
            </div>
            <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(updated)}</span>
        </div>
    )}

    <!-- categories -->
    <div class="flex items-center">
        <div class="meta-icon"
        >
            <Icon name="material-symbols:book-2-outline-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            <a href={getCategoryUrl(category)} aria-label={`View all posts in the ${category} category`}
               class="link-lg transition text-50 text-sm font-medium
                            hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                {category || i18n(I18nKey.uncategorized)}
            </a>
        </div>
    </div>

    <!-- tags -->
    <div class:list={["items-center", {"flex": !hideTagsForMobile, "hidden md:flex": hideTagsForMobile}]}>
        <div class="meta-icon"
        >
            <Icon name="material-symbols:tag-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            {(tags && tags.length > 0) && tags.map((tag, i) => (
                <div class:list={[{"hidden": i == 0}, "mx-1.5 text-[var(--meta-divider)] text-sm"]}>/</div>
                <a href={getTagUrl(tag)} aria-label={`View all posts with the ${tag.trim()} tag`}
                   class="link-lg transition text-50 text-sm font-medium
                                hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                    {tag.trim()}
                </a>
            ))}
            {!(tags && tags.length > 0) && <div class="transition text-50 text-sm font-medium">{i18n(I18nKey.noTags)}</div>}
        </div>
    </div>

    <!-- comment count -->
    <div class="flex items-center comment-count-container" data-path={path} data-env-id={envId}>
        <div class="meta-icon">
            <Icon name="material-symbols:comment-outline-rounded" class="text-xl"></Icon>
        </div>
        <span class="text-50 text-sm font-medium comment-count">0</span>
    </div>
</div>

<script>
    // 动态加载Twikoo
    function loadTwikoo() {
        return new Promise((resolve, reject) => {
            if (window.twikoo) {
                resolve(window.twikoo);
                return;
            }
            
            const script = document.createElement('script');
            script.src = 'https://cdn.staticfile.org/twikoo/1.6.31/twikoo.all.min.js';
            script.onload = () => resolve(window.twikoo);
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }

    // 获取评论计数
    async function updateCommentCounts() {
        try {
            const envId = document.querySelector('.comment-count-container')?.dataset.envId;
            if (!envId) return;
            
            const twikoo = await loadTwikoo();
            const containers = document.querySelectorAll('.comment-count-container');
            
            if (containers.length === 0) return;
            
            const paths = Array.from(containers).map(container => container.dataset.path);
            
            twikoo.getCommentsCount({
                envId,
                urls: paths,
                includeReply: true,
                onSuccess: function(counts) {
                    containers.forEach((container, index) => {
                        const countElement = container.querySelector('.comment-count');
                        if (countElement && counts[index]) {
                            countElement.textContent = counts[index].count;
                        }
                    });
                }
            });
        } catch (error) {
            console.error('Failed to load comment counts:', error);
        }
    }

    // 页面加载完成后更新评论计数
    document.addEventListener('DOMContentLoaded', updateCommentCounts);
</script>
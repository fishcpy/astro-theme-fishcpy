---
import Twikoo from "@components/comment/Twikoo.astro";
import BackToTop from "@components/control/BackToTop.astro";
import Footer from "@components/Footer.astro";
import Navbar from "@components/Navbar.astro";
import MobileSidebar from "@components/widget/MobileSidebar.astro";
import SideBar from "@components/widget/SideBar.astro";
import type { MarkdownHeading } from "astro";
import { Icon } from "astro-icon/components";
import BannerWrapper from "../components/misc/BannerWrapper.astro";
import ImageWrapper from "../components/misc/ImageWrapper.astro";
import TOC from "../components/widget/TOC.astro";
import { siteConfig } from "../config";
import {
	BANNER_HEIGHT,
	BANNER_HEIGHT_EXTEND,
	BANNER_HEIGHT_FULLSCREEN,
	BANNER_HEIGHT_FULLSCREEN_EXTEND,
	MAIN_PANEL_OVERLAPS_BANNER_HEIGHT,
} from "../constants/constants";
import Layout from "./Layout.astro";

interface Props {
	title?: string;
	banner?: string;
	description?: string;
	lang?: string;
	setOGTypeArticle?: boolean;
	headings?: MarkdownHeading[];
}

const {
	title,
	banner,
	description,
	lang,
	setOGTypeArticle,
	headings = [],
} = Astro.props;
const hasBannerCredit =
	siteConfig.banner.enable && siteConfig.banner.credit.enable;
const hasBannerLink = !!siteConfig.banner.credit.url;

// 根据fullscreen配置计算主面板的顶部位置
const isFullscreenBanner = siteConfig.banner.fullscreen;

// 全屏模式下，移动端和桌面端都使用100vh，但移动端需要额外处理动态视口高度
const mainPanelTop = siteConfig.banner.enable
	? isFullscreenBanner
		? "100vh" // 全屏模式下，内容从100vh后开始
		: `calc(${BANNER_HEIGHT}vh - ${MAIN_PANEL_OVERLAPS_BANNER_HEIGHT}rem + 6rem)` // 普通模式
	: "5.5rem";
---

<Layout title={title} banner={banner} description={description} lang={lang} setOGTypeArticle={setOGTypeArticle}>

<!-- Navbar -->
<slot slot="head" name="head"></slot>
<div id="top-row" class="z-50 pointer-events-none relative transition-all duration-700 w-full px-0" class:list={[""]}>
    <div id="navbar-wrapper" class="pointer-events-auto sticky top-0 transition-all">
        <Navbar></Navbar>
    </div>
</div>

<!-- Banner -->
{siteConfig.banner.enable && <div id="banner-wrapper" class={`absolute z-10 w-full transition duration-700 overflow-hidden`} style={isFullscreenBanner ? "top: 0" : `top: calc(-1 * var(--banner-height-extend))`}>
    <BannerWrapper id="banner" alt="Banner image of the blog" class:list={["object-cover h-full transition duration-700 opacity-0 scale-105"]}
    >
    </BannerWrapper>
</div>}

<!-- Main content -->
<div class="absolute w-full z-30 pointer-events-none" style={`top: ${mainPanelTop}`} id="main-content-wrapper">
    <!-- The pointer-events-none here prevent blocking the click event of the TOC -->
    <div class="relative max-w-[var(--page-width)] mx-auto pointer-events-auto">
        <div id="main-grid" class="transition duration-700 w-full left-0 right-0 grid grid-cols-[17.5rem_auto] grid-rows-[auto_1fr_auto] md:grid-rows-[auto]
    mx-auto gap-4 px-0 md:px-4"
        >
            <!-- Banner image credit -->
            {hasBannerCredit && <a href={siteConfig.banner.credit.url} id="banner-credit" target="_blank" rel="noopener" aria-label="Visit image source"
                                   class:list={["group onload-animation transition-all absolute flex justify-center items-center rounded-full " +
                                   "px-3 right-4 -top-[3.25rem] bg-black/60 hover:bg-black/70 h-9", {"hover:pr-9 active:bg-black/80": hasBannerLink}]}
            >
                <Icon class="text-white/75 text-[1.25rem] mr-1" name="material-symbols:copyright-outline-rounded" ></Icon>
                <div class="text-white/75 text-xs">{siteConfig.banner.credit.text}</div>
                <Icon class:list={["transition absolute text-[oklch(0.75_0.14_var(--hue))] right-4 text-[0.75rem] opacity-0",
                    {"group-hover:opacity-100": hasBannerLink}]}
                      name="fa6-solid:arrow-up-right-from-square">
                </Icon>
            </a>}


            <SideBar class="mb-4 row-start-2 row-end-3 col-span-2 md:row-start-1 md:row-end-2 md:col-span-1 md:max-w-[17.5rem] onload-animation" headings={headings}></SideBar>

            <main id="swup-container" class="transition-swup-fade col-span-2 md:col-span-1 overflow-hidden">
                <div id="content-wrapper" class="onload-animation">
                    <!-- the overflow-hidden here prevent long text break the layout-->
                    <!-- make id different from windows.swup global property -->
                    <slot></slot>
                    
                    {/* 添加评论组件，仅在友链页面显示 */}
                    {Astro.url.pathname === '/friends/' && (
                      <div class="card-base p-6 mb-4 mt-4">
                        <Twikoo path="/friends/" />
                      </div>
                    )}
                    
                    <div class="footer col-span-2 onload-animation hidden lg:block">
                        <Footer></Footer>
                    </div>
                </div>
            </main>

            <div class="footer col-span-2 onload-animation block lg:hidden">
                <Footer></Footer>
            </div>
        </div>

        <BackToTop></BackToTop>
    </div>
</div>

<!-- Mobile Sidebar -->
<MobileSidebar />

<!-- The things that should be under the banner, only the TOC for now -->
<div class="absolute w-full z-0 hidden 2xl:block">
    <div class="relative max-w-[var(--page-width)] mx-auto">
        <!-- TOC component -->
        {siteConfig.toc.enable && <div id="toc-wrapper" class:list={["hidden lg:block transition absolute top-0 -right-[var(--toc-width)] w-[var(--toc-width)] items-center",
            {"toc-hide": siteConfig.banner.enable}]}
        >
            <div id="toc-inner-wrapper" class="fixed top-14 w-[var(--toc-width)] h-[calc(100vh_-_20rem)] overflow-y-scroll overflow-x-hidden hide-scrollbar">
                <div id="toc" class="w-full h-full transition-swup-fade ">
                    <div class="h-8 w-full"></div>
                    <TOC headings={headings}></TOC>
                    <div class="h-8 w-full"></div>
                </div>
            </div>
        </div>}

        <!-- #toc needs to exist for Swup to work normally -->
        {!siteConfig.toc.enable && <div id="toc"></div>}
    </div>
</div>

<!-- Twikoo 访问量统计脚本 -->
<script>
import { commentConfig } from "@/config";

// Twikoo 访问量统计管理器
class TwikooVisitorManager {
  constructor() {
    this.initialized = false;
    this.config = null;
    this.retryCount = 0;
    this.maxRetries = 10;
  }

  // 初始化访问量统计
  async init() {
    if (this.initialized || !commentConfig?.twikoo?.envId) return;
    
    this.config = {
      envId: commentConfig.twikoo.envId
    };

    // 等待 Twikoo 加载完成
    await this.waitForTwikoo();
    
    // 更新所有访问量
    this.updateAllVisitors();
    
    this.initialized = true;
  }

  // 等待 Twikoo 加载完成
  waitForTwikoo() {
    return new Promise((resolve, reject) => {
      const checkTwikoo = () => {
        if (typeof window !== 'undefined' && window.twikoo) {
          resolve();
        } else if (this.retryCount < this.maxRetries) {
          this.retryCount++;
          setTimeout(checkTwikoo, 500);
        } else {
          reject(new Error('Twikoo failed to load'));
        }
      };
      checkTwikoo();
    });
  }

  // 更新所有访问量显示
  async updateAllVisitors() {
    // 查找所有访问量元素
    const visitorElements = document.querySelectorAll('[id^="twikoo_visitors_"]');
    
    if (visitorElements.length === 0) {
      return;
    }

    // 收集所有URL
    const urls = [];
    const elementMap = new Map();
    
    for (const element of visitorElements) {
      const url = this.extractUrlFromId(element.id);
      urls.push(url);
      elementMap.set(url, element);
    }

    // 批量获取访问量
    try {
      const counts = await this.getVisitorCounts(urls);
      
      // 更新每个元素
      for (const [url, count] of Object.entries(counts)) {
        const element = elementMap.get(url);
        if (element) {
          element.textContent = count.toString();
        }
      }
    } catch (error) {
      // 如果批量获取失败，尝试单独获取
      for (const element of visitorElements) {
        try {
          const url = this.extractUrlFromId(element.id);
          const count = await this.getSingleVisitorCount(url);
          element.textContent = count.toString();
        } catch (singleError) {
          element.textContent = '0';
        }
      }
    }
  }

  // 从元素ID中提取URL
  extractUrlFromId(id) {
    // 移除前缀并将下划线转换回斜杠
    let url = id.replace('twikoo_visitors_', '').replace(/_/g, '/');
    
    // 确保URL以/开头
    if (!url.startsWith('/')) {
      url = '/' + url;
    }
    
    return url;
  }

  // 批量获取访问量（Twikoo不支持真正的批量API，所以逐个获取）
  async getVisitorCounts(urls) {
    if (!window.twikoo) {
      throw new Error('Twikoo not available');
    }
    
    const counts = {};
    
    // 逐个获取每个URL的访问量
    for (const url of urls) {
      try {
        const count = await this.getSingleVisitorCount(url);
        counts[url] = count;
      } catch (error) {
        counts[url] = 0;
      }
    }
    
    return counts;
  }

  // 获取单个页面的访问量
  async getSingleVisitorCount(url) {
    if (!window.twikoo) {
      throw new Error('Twikoo not available');
    }

    try {
      // 尝试直接调用 Twikoo API
      const response = await fetch(this.config.envId, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          event: 'COUNTER_GET',
          url: url
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        
        // 处理返回的数据
        if (data.data && data.data.time !== undefined) {
          return data.data.time;
        } else if (data.time !== undefined) {
          return data.time;
        }
      }

      return 0;
    } catch (error) {
      return 0;
    }
  }

  // 手动更新特定URL的访问量
  async updateVisitorForUrl(url) {
    const elementId = `twikoo_visitors_${url.replace(/[^a-zA-Z0-9]/g, '_')}`;
    const element = document.getElementById(elementId);
    
    if (!element) return;

    try {
      const count = await this.getSingleVisitorCount(url);
      element.textContent = count.toString();
    } catch (error) {
      // 静默处理错误
    }
  }
}

// 创建全局实例
window.twikooVisitorManager = new TwikooVisitorManager();

// 初始化函数
function initTwikooVisitors() {
  if (window.twikooVisitorManager) {
    window.twikooVisitorManager.init().catch(error => {
      // 静默处理初始化错误
    });
  }
}

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', () => {
  setTimeout(initTwikooVisitors, 3000); // 延迟3秒确保Twikoo已加载
});

// Astro 客户端路由支持
document.addEventListener('astro:page-load', () => {
  setTimeout(initTwikooVisitors, 2000);
});

// 浏览器前进后退支持
window.addEventListener('popstate', () => {
  setTimeout(initTwikooVisitors, 2000);
});
</script>

</Layout>
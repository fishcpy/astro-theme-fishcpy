---
import { Icon } from "astro-icon/components";
import Comment from "@components/comment/index.astro";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import MainGridLayout from "../layouts/MainGridLayout.astro";
import essayData from "../assets/essay.json";

// 按ID倒序排列，ID越大越靠前
const essays = essayData.sort((a, b) => b.id - a.id);

// 为评论区创建一个模拟的post对象
const mockPost = {
	slug: "essay",
	data: {
		title: "瞬间"
	}
};
---

<MainGridLayout title="瞬间" description="记录生活中的美好瞬间">
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32 mb-8">
        <div class="card-base z-10 px-9 py-6 relative w-full">
            <h1 class="text-4xl font-bold mb-6 text-neutral-900 dark:text-white">瞬间</h1>
            <p class="text-neutral-600 dark:text-neutral-400 mb-8">记录生活中的美好瞬间</p>
            
            <div class="space-y-6">
                {essays.map((essay) => (
                    <div class="essay-item bg-[var(--card-bg)] rounded-lg p-6 shadow-sm border border-[var(--line-divider)] transition-all hover:shadow-md">
                        <!-- 内容 -->
                        <div class="essay-content text-90 text-lg leading-relaxed mb-4">
                            {essay.content}
                        </div>
                        
                        <!-- 图片 -->
                        {essay.images && essay.images.length > 0 && (
                            <div class="essay-images mb-4">
                                <div class="grid gap-3" class:list={[
                                    essay.images.length === 1 ? "grid-cols-1" : 
                                    essay.images.length === 2 ? "grid-cols-2" :
                                    essay.images.length === 3 ? "grid-cols-3" :
                                    "grid-cols-2 md:grid-cols-3"
                                ]}>
                                    {essay.images.map((image, index) => (
                                        <div class="rounded-lg overflow-hidden bg-[var(--btn-card-bg-hover)]">
                                            <img 
                                                src={image} 
                                                alt={`瞬间图片 ${index + 1}`}
                                                class="w-full h-48 object-cover hover:scale-105 transition-transform duration-300 cursor-pointer"
                                                loading="lazy"
                                            />
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}
                        
                        <!-- 底部信息 -->
                        <div class="essay-meta flex items-center justify-between text-sm text-75">
                            <div class="flex items-center gap-4">
                                <!-- 时间 -->
                                <div class="flex items-center gap-1">
                                    <Icon name="material-symbols:schedule" class="text-base" />
                                    <span>{essay.time}</span>
                                </div>
                                
                                <!-- 标签 -->
                                {essay.tags && essay.tags.length > 0 && (
                                    <div class="flex items-center gap-2">
                                        <Icon name="material-symbols:tag" class="text-base" />
                                        <div class="flex gap-2">
                                            {essay.tags.map((tag) => (
                                                <span class="px-2 py-1 bg-[var(--btn-card-bg-hover)] rounded-full text-xs">
                                                    {tag}
                                                </span>
                                            ))}
                                        </div>
                                    </div>
                                )}
                            </div>
                            
                            <!-- 评论按钮 -->
                            <button 
                                class="comment-btn flex items-center gap-1 px-3 py-1 rounded-full bg-[var(--btn-regular-bg)] hover:bg-[var(--btn-card-bg-hover)] transition-colors cursor-pointer"
                                data-content={essay.content}
                            >
                                <Icon name="material-symbols:comment" class="text-base" />
                                <span>评论</span>
                            </button>
                        </div>
                    </div>
                ))}
            </div>
        </div>
    </div>

    <!-- 评论区 -->
    <div id="comments-section">
        <Comment post={mockPost}></Comment>
    </div>
</MainGridLayout>

<script is:inline>
    document.addEventListener('DOMContentLoaded', function() {
        // 为所有评论按钮添加点击事件监听器
        const commentButtons = document.querySelectorAll('.comment-btn');
        commentButtons.forEach(button => {
            button.addEventListener('click', function() {
                const content = this.getAttribute('data-content');
                const commentsSection = document.getElementById('comments-section');
                if (commentsSection) {
                    commentsSection.scrollIntoView({ 
                        behavior: 'smooth',
                        block: 'start'
                    });
                    
                    // 延迟一下确保评论区已经加载
                    setTimeout(() => {
                        // 查找评论输入框
                        const commentInput = document.querySelector('#twikoo .el-textarea__inner, #twikoo textarea, .tk-input[name="comment"]');
                        if (commentInput && content) {
                            const quotedContent = `> ${content}\n\n`;
                            commentInput.value = quotedContent;
                            commentInput.focus();
                            // 触发输入事件以确保框架能检测到变化
                            const event = new Event('input', { bubbles: true });
                            commentInput.dispatchEvent(event);
                        }
                    }, 500);
                }
            });
        });
    });
    
    // 图片点击放大功能
    document.addEventListener('DOMContentLoaded', function() {
        const images = document.querySelectorAll('.essay-images img');
        images.forEach(img => {
            img.addEventListener('click', function() {
                // 创建模态框显示大图
                const modal = document.createElement('div');
                modal.className = 'fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 cursor-pointer';
                modal.innerHTML = `
                    <img src="${this.src}" alt="${this.alt}" class="max-w-full max-h-full object-contain">
                `;
                
                // 点击模态框关闭
                modal.addEventListener('click', function() {
                    document.body.removeChild(modal);
                });
                
                document.body.appendChild(modal);
            });
        });
    });
</script>

<style>
    .essay-item {
        animation: fadeInUp 0.6s ease-out;
    }
    
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .essay-content {
        word-wrap: break-word;
        white-space: pre-wrap;
    }
</style>
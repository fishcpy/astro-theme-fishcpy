---
import { Icon } from "astro-icon/components";
import entertainmentData from "../assets/chronobox.json";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import MainGridLayout from "../layouts/MainGridLayout.astro";

// 按类型分组并按ID降序排列
const groupedItems = entertainmentData.reduce(
	(acc: Record<string, typeof entertainmentData>, item) => {
		const type = item.type || "其他";
		if (!acc[type]) {
			acc[type] = [];
		}
		acc[type].push(item);
		return acc;
	},
	{} as Record<string, typeof entertainmentData>,
);

// 对每个类型的数组按ID降序排列
Object.keys(groupedItems).forEach((type) => {
	groupedItems[type].sort((a, b) => b.id - a.id);
});

// 统计各状态数量
const statusCounts = entertainmentData.reduce(
	(acc: Record<string, number>, item) => {
		acc[item.status] = (acc[item.status] || 0) + 1;
		return acc;
	},
	{} as Record<string, number>,
);

// 获取星级显示
function getStarRating(rating: number) {
	return Array.from({ length: 5 }, (_, i) => i < rating);
}

// 获取状态颜色
function getStatusColor(status: string) {
	switch (status) {
		case "在看":
			return "bg-blue-500 text-white";
		case "看过":
			return "bg-green-500 text-white";
		case "想看":
			return "bg-yellow-500 text-white";
		case "搁置":
			return "bg-gray-500 text-white";
		default:
			return "bg-gray-400 text-white";
	}
}
---

<MainGridLayout title="时间盒" description="记录观看的番剧、电影等内容">
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative min-h-32 mb-8">
        <div class="card-base z-10 px-9 py-6 relative w-full">
            <h1 class="text-4xl font-bold mb-6 text-neutral-900 dark:text-white">时间盒</h1>
            <p class="text-neutral-600 dark:text-neutral-400 mb-6">记录观看的番剧、电影等内容</p>
            
            <!-- 统计信息和筛选 -->
            <div class="flex flex-wrap gap-4 mb-8">
                <button 
                    class="filter-btn flex items-center gap-2 px-4 py-2 rounded-lg bg-[var(--card-bg)] border border-[var(--line-divider)] hover:bg-[var(--btn-card-bg)] transition-colors cursor-pointer active"
                    data-status="all"
                >
                    <span class="text-sm font-medium text-neutral-700 dark:text-neutral-300">全部</span>
                    <span class="text-lg font-bold text-neutral-900 dark:text-white">{entertainmentData.length}</span>
                </button>
                {Object.entries(statusCounts).map(([status, count]) => (
                    <button 
                        class="filter-btn flex items-center gap-2 px-4 py-2 rounded-lg bg-[var(--card-bg)] border border-[var(--line-divider)] hover:bg-[var(--btn-card-bg)] transition-colors cursor-pointer"
                        data-status={status}
                    >
                        <span class="text-sm font-medium text-neutral-700 dark:text-neutral-300">{status}</span>
                        <span class="text-lg font-bold text-neutral-900 dark:text-white">{count}</span>
                    </button>
                ))}
            </div>
            
            {Object.entries(groupedItems).map(([type, typeItems]) => (
                <div class="mb-12" data-category={type}>
                    <h2 class="text-2xl font-bold mb-6 text-neutral-800 dark:text-neutral-200 flex items-center gap-2">
                        <Icon name="material-symbols:play-circle" class="w-6 h-6" />
                        {type}
                        <span class="text-sm font-normal text-neutral-500 dark:text-neutral-400">({typeItems.length})</span>
                    </h2>
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        {typeItems.map((item) => (
                            <div class="entertainment-card bg-[var(--card-bg)] rounded-lg overflow-hidden shadow-sm border border-[var(--line-divider)] transition-all hover:shadow-lg duration-300 flex" data-status={item.status}>
                                <!-- 封面图片 -->
                                <div class="relative w-32 h-48 flex-shrink-0 overflow-hidden bg-zinc-200 dark:bg-zinc-800">
                                    {item.url ? (
                                        <a href={item.url} target="_blank" rel="noopener noreferrer" class="block w-full h-full relative group">
                                            <img 
                                                src={item.cover} 
                                                alt={item.title}
                                                class="w-full h-full object-cover"
                                                loading="lazy"
                                            />
                                            <!-- 链接指示器 -->
                                            <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all duration-300 flex items-center justify-center">
                                                <div class="opacity-0 group-hover:opacity-100 transition-opacity duration-300 bg-white bg-opacity-90 rounded-full p-2">
                                                    <svg class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                                                    </svg>
                                                </div>
                                            </div>
                                        </a>
                                    ) : (
                                        <img 
                                            src={item.cover} 
                                            alt={item.title}
                                            class="w-full h-full object-cover"
                                            loading="lazy"
                                        />
                                    )}
                                    <!-- 状态标签 -->
                                    <div class={`absolute top-2 right-2 px-2 py-1 rounded text-xs font-medium ${getStatusColor(item.status)}`}>
                                        {item.status}
                                    </div>
                                    <!-- 年份 -->
                                    <div class="absolute bottom-2 left-2 px-2 py-1 rounded bg-black bg-opacity-70 text-white text-xs">
                                        {item.year}
                                    </div>
                                </div>
                                
                                <!-- 内容信息 -->
                                <div class="p-4 flex-1 flex flex-col">
                                    {item.url ? (
                                        <a href={item.url} target="_blank" rel="noopener noreferrer" class="block group">
                                            <h3 class="font-bold text-lg text-neutral-900 dark:text-neutral-100 mb-2 line-clamp-1 group-hover:text-[var(--primary)] transition-colors">
                                                {item.title}
                                            </h3>
                                        </a>
                                    ) : (
                                        <h3 class="font-bold text-lg text-neutral-900 dark:text-neutral-100 mb-2 line-clamp-1">
                                            {item.title}
                                        </h3>
                                    )}
                                    
                                    <!-- 评分 -->
                                    <div class="flex items-center gap-1 mb-2">
                                        <span class="text-sm text-neutral-600 dark:text-neutral-400">评分:</span>
                                        <div class="flex items-center gap-0.5">
                                            {getStarRating(item.rating).map((filled) => (
                                                <Icon 
                                                name={filled ? "material-symbols:star" : "material-symbols:star-outline"} 
                                                class={`w-4 h-4 ${filled ? 'text-yellow-400' : 'text-gray-300 dark:text-gray-600'}`} 
                                            />
                                            ))}
                                        </div>
                                    </div>
                                    
                                    <!-- 描述 -->
                                    <p class="text-sm text-neutral-600 dark:text-neutral-400 mb-3 line-clamp-3 flex-1">
                                        {item.description}
                                    </p>
                                    
                                    <!-- 标签 -->
                                    <div class="flex flex-wrap gap-1 mt-auto">
                                        {item.tags.map((tag) => (
                                            <span class="px-2 py-1 text-xs rounded-full bg-[var(--btn-card-bg)] text-neutral-600 dark:text-neutral-400 border border-[var(--line-divider)]">
                                                {tag}
                                            </span>
                                        ))}
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            ))}
        </div>
    </div>
</MainGridLayout>

<style>
.entertainment-card {
    transition: all 0.3s ease;
}

.entertainment-card.hidden {
    display: none;
}

.filter-btn.active {
    background: var(--btn-card-bg);
    border-color: var(--primary);
    box-shadow: 0 0 0 1px var(--primary);
}

.line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
}
</style>

<script>
    function initializeFilters() {
        console.log('Initializing filters...');
        
        // 确保DOM已加载
        if (!document.querySelector('.filter-btn')) {
            console.log('Filter buttons not found, retrying...');
            setTimeout(initializeFilters, 100);
            return;
        }
        
        const filterBtns = document.querySelectorAll('.filter-btn');
        const entertainmentCards = document.querySelectorAll('.entertainment-card');
        
        console.log(`Found ${filterBtns.length} filter buttons and ${entertainmentCards.length} cards`);
        
        // 移除之前的事件监听器
        filterBtns.forEach(btn => {
            const newBtn = btn.cloneNode(true);
            btn.parentNode.replaceChild(newBtn, btn);
        });
        
        // 重新获取按钮元素并添加事件监听器
        const newFilterBtns = document.querySelectorAll('.filter-btn');
        
        newFilterBtns.forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                console.log('Filter button clicked:', this.getAttribute('data-status'));
                
                const targetStatus = this.getAttribute('data-status');
                
                // 更新按钮状态
                newFilterBtns.forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                
                // 重新获取卡片（防止DOM更新后引用失效）
                const currentCards = document.querySelectorAll('.entertainment-card');
                
                // 筛选卡片
                currentCards.forEach(card => {
                    const cardStatus = card.getAttribute('data-status');
                    
                    if (targetStatus === 'all' || cardStatus === targetStatus) {
                        card.classList.remove('hidden');
                    } else {
                        card.classList.add('hidden');
                    }
                });
                
                // 更新分类标题显示
                updateCategoryVisibility();
            });
        });
        
        function updateCategoryVisibility() {
            const categories = document.querySelectorAll('[data-category]');
            categories.forEach(category => {
                const visibleCards = category.querySelectorAll('.entertainment-card:not(.hidden)');
                if (visibleCards.length === 0) {
                    category.style.display = 'none';
                } else {
                    category.style.display = 'block';
                }
            });
        }
        
        console.log('Filters initialized successfully');
    }
    
    // 页面加载时初始化
    document.addEventListener('DOMContentLoaded', initializeFilters);
    
    // Swup 页面切换事件监听器
    const setupSwupHooks = () => {
        console.log('Setting up Swup hooks...');
        if (window.swup && window.swup.hooks) {
            // 页面内容替换后
            window.swup.hooks.on('content:replace', () => {
                console.log('Swup content:replace event');
                setTimeout(initializeFilters, 50);
            });
            
            // 页面视图准备就绪
            window.swup.hooks.on('page:view', () => {
                console.log('Swup page:view event');
                setTimeout(initializeFilters, 100);
                
                // 强制重新渲染图标以解决astro-icon在PJAX切换后消失的问题
                setTimeout(() => {
                    const icons = document.querySelectorAll('svg[data-icon]');
                    icons.forEach(icon => {
                        const parent = icon.parentNode;
                        const clone = icon.cloneNode(true);
                        parent.replaceChild(clone, icon);
                    });
                }, 100);
            });
            
            // 动画完成后
            window.swup.hooks.on('animation:out:end', () => {
                console.log('Swup animation:out:end event');
            });
            
            window.swup.hooks.on('animation:in:end', () => {
                console.log('Swup animation:in:end event');
                setTimeout(initializeFilters, 50);
            });
        }
    };
    
    // 初始化Swup钩子
    if (window.swup) {
        setupSwupHooks();
    } else {
        document.addEventListener('swup:enable', setupSwupHooks);
        // 监听swup初始化完成
        document.addEventListener('DOMContentLoaded', () => {
            if (window.swup) {
                setupSwupHooks();
            }
        });
    }
    
    // 兼容Astro路由和延迟加载
    document.addEventListener('astro:page-load', () => {
        console.log('Astro page:load event');
        setTimeout(initializeFilters, 50);
    });
    
    document.addEventListener('astro:after-swap', () => {
        console.log('Astro after:swap event');
        setTimeout(initializeFilters, 100);
    });
    
    // 页面加载时初始化
    document.addEventListener('DOMContentLoaded', () => {
        console.log('DOMContentLoaded event');
        initializeFilters();
    });
    
    if (typeof window !== 'undefined') {
        // 延迟执行以确保DOM已更新
        setTimeout(() => {
            console.log('Delayed initialization (100ms)');
            initializeFilters();
        }, 100);
        
        setTimeout(() => {
            console.log('Delayed initialization (500ms)');
            initializeFilters();
        }, 500);
        
        // 监听页面可见性变化
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden) {
                console.log('Page became visible');
                setTimeout(initializeFilters, 50);
            }
        });
    }
</script>